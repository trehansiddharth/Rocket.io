{
  "name": "passport-google-plus",
  "description": "Passport strategy for using G+ Sign-In",
  "contributors": [
    {
      "name": "Steve Bazyl",
      "email": "sbazyl@google.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/sqrrrl/passport-google-plus.git"
  },
  "version": "0.1.1",
  "main": "./lib/strategy",
  "dependencies": {
    "googleapis": "0.4.6",
    "green-jwt": "",
    "passport": "0.1.x",
    "request": "2.2.x",
    "xtend": "2.x",
    "async": "0.2.x"
  },
  "devDependencies": {
    "supertest": "0.7.0",
    "should": "1.2.x",
    "mocha": "1.11.0",
    "request": "2.2.x",
    "rewire": "1.1.x",
    "timekeeper": ""
  },
  "scripts": {
    "test": "mocha tests/*"
  },
  "keywords": [
    "google",
    "g+",
    "passport"
  ],
  "license": "Apache 2",
  "readme": "# Passport-Google-Plus\n\n[Passport](http://passportjs.org/) strategies for authenticating with the \n[Google+ Sign-In](https://developers.google.com/+/features/sign-in) button. \n\nThis module lets you authenticate using Google in your Node.js applications.\nBy plugging into Passport, Google+ Sign-In can be easily and\nunobtrusively integrated into any application or framework that supports\n[Connect](http://www.senchalabs.org/connect/)-style middleware, including\n[Express](http://expressjs.com/).\n\n## Install\n\n    $ npm install passport-google-plus\n\n## Usage for [Web Server-Side Flow](https://developers.google.com/+/web/signin/server-side-flow)\n\n#### Configure Strategy\n\nThe strategy accepts a callback which is called after the user has been authenticated. The\nprofile and OAuth credentials can be saved or mapped to a user record.\n\n```js\nvar GooglePlusStrategy = require('passport-google-plus');\n\npassport.use(new GooglePlusStrategy({\n    clientId: 'YOUR_CLIENT_ID',\n    clientSecret: 'YOUR_CLIENT_SECRET'\n  },\n  function(tokens, profile, done) {\n    // Create or update user, call done() when complete...\n    done(null, profile, tokens);s\n  }\n));\n```\n    \n#### Configure Google+ Sign-In Button\n\n```html\n<!-- Add where you want your sign-in button to render -->\n<div id=\"signinButton\">\n  <span class=\"g-signin\"\n    data-scope=\"https://www.googleapis.com/auth/plus.login\"\n    data-clientid=\"YOUR_CLIENT_ID\"\n    data-redirecturi=\"postmessage\"\n    data-accesstype=\"offline\"\n    data-cookiepolicy=\"single_host_origin\"\n    data-callback=\"signInCallback\">\n  </span>\n</div>\n<div id=\"result\"></div>\n```\n\n\n#### Handle the callback & forward the authorization code\n\n```js\nfunction signInCallback(authResult) {\n  if (authResult.code) {\n    $.post('/auth/google/callback', { code: authResult.code})\n    .done(function(data) {\n      $('#signinButton').hide();\n    }); \n  } else if (authResult.error) {\n    console.log('There was an error: ' + authResult.error);\n  }\n};\n```\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'google'` strategy, to\nauthenticate requests.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n```js\napp.get('/auth/google/callback', passport.authenticate('google'), function(req, res) {\n    // Return user back to client\n    res.send(req.user);\n});\n```\n\n## Usage for [Web Client-Side Flow](https://developers.google.com/+/web/signin/#using_the_client-side_flow)\n\nClient-side flows are also supported for web & mobile using ID tokens. When using ID tokens, profile \ndata is limited to public information.\n\n#### Configure Strategy\n\nThe strategy accepts a callback which is called after the user has been authenticated. The\nprofile and OAuth credentials can be saved or mapped to a user record.\n\n```js\nvar GooglePlusStrategy = require('passport-google-plus');\n\npassport.use(new GooglePlusStrategy({\n    clientId: 'YOUR_CLIENT_ID',\n    apiKey: 'YOUR_API_KEY'\n  },\n  function(tokens, profile, done) {\n    // Create or update user, call done() when complete...\n    done(null, profile, tokens);s\n  }\n));\n```\n\n#### Configure Google+ Sign-In Button\n\n```html\n<!-- Add where you want your sign-in button to render -->\n<div id=\"signinButton\">\n  <span class=\"g-signin\"\n    data-scope=\"https://www.googleapis.com/auth/plus.login\"\n    data-clientid=\"YOUR_CLIENT_ID\"\n    data-redirecturi=\"postmessage\"\n    data-accesstype=\"online\"\n    data-cookiepolicy=\"single_host_origin\"\n    data-callback=\"signInCallback\">\n  </span>\n</div>\n<div id=\"result\"></div>\n```\n\n#### Handle the callback & forward the identity token\n\n```js\nfunction signInCallback(authResult) {\n  if (authResult.code) {\n    $.post('/auth/google/callback', { id_token: authResult.id_token})\n    .done(function(data) {\n      $('#signinButton').hide();\n    }); \n  } else if (authResult.error) {\n    console.log('There was an error: ' + authResult.error);\n  }\n};\n```\n",
  "readmeFilename": "README.md",
  "_id": "passport-google-plus@0.1.1",
  "dist": {
    "shasum": "c897719bd7bc0b64f99925f5f5969eaf6f73e152"
  },
  "_from": "passport-google-plus@0.1.1",
  "_resolved": "https://registry.npmjs.org/passport-google-plus/-/passport-google-plus-0.1.1.tgz"
}
